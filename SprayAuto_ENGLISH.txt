from ahk import AHK
from PIL import Image
import time
import threading
from collections import defaultdict
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import keyboard
from pynput import mouse
import os
import sqlite3
from datetime import datetime


# Инициализация базы данных
def init_db():
    conn = sqlite3.connect('spray_paint_coords.db')
    c = conn.cursor()

    # Таблица для координат области рисования
    c.execute('''CREATE TABLE IF NOT EXISTS drawing_area
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  top_left_x INTEGER, top_left_y INTEGER,
                  top_right_x INTEGER, top_right_y INTEGER,
                  bottom_left_x INTEGER, bottom_left_y INTEGER,
                  bottom_right_x INTEGER, bottom_right_y INTEGER,
                  timestamp DATETIME)''')

    # Таблица для координат RGB полей
    c.execute('''CREATE TABLE IF NOT EXISTS rgb_fields
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  r_x INTEGER, r_y INTEGER,
                  g_x INTEGER, g_y INTEGER,
                  b_x INTEGER, b_y INTEGER,
                  timestamp DATETIME)''')

    conn.commit()
    conn.close()


# Инициализируем БД при старте
init_db()

ahk = AHK()

# Настройки по умолчанию
CLICK_DELAY = 0.02
COLOR_CHANGE_DELAY = 0.06
MOVEMENT_SPEED = 5
COLOR_SIMILARITY_THRESHOLD = 5
COUNTDOWN_SECONDS = 3

# Координаты области рисования (по умолчанию)
top_left = [640, 35]
top_right = [1240, 35]
bottom_left = [640, 955]
bottom_right = [1240, 955]

# Текстовые поля RGB (по умолчанию)
R_FIELD = [107, 969]
G_FIELD = [190, 969]
B_FIELD = [270, 969]

# Координаты для сохранения рисунка
SAVE_BUTTON_POS = [1828, 54]
FILENAME_INPUT_POS = [745, 425]
FILENAME_CLICK_OFFSET = 10
SAVE_CONFIRM_POS = [938, 425]

current_color = None
paused = False
stop_flag = False
img = None
img_path = None
points = []
hotkey_listener = None
rgb_points = []
total_pixels = 0
processed_pixels = 0


class ProgressWindow:
    def __init__(self, parent):
        self.top = tk.Toplevel(parent)
        self.top.title("Drawing Progress")

        self.progress_label = ttk.Label(self.top, text="Preparing to draw...")
        self.progress_label.pack(pady=10)

        self.progress_bar = ttk.Progressbar(self.top, orient="horizontal", length=300, mode="determinate")
        self.progress_bar.pack(pady=10, padx=20)

        self.percentage_label = ttk.Label(self.top, text="0%")
        self.percentage_label.pack(pady=5)

        self.time_label = ttk.Label(self.top, text="Remaining: calculating...")
        self.time_label.pack(pady=5)

        self.start_time = time.time()

    def update_progress(self, current, total):
        percentage = int((current / total) * 100)
        self.progress_bar["value"] = percentage
        self.percentage_label.config(text=f"{percentage}%")

        elapsed = time.time() - self.start_time
        if current > 0:
            remaining = (elapsed / current) * (total - current)
            mins, secs = divmod(remaining, 60)
            self.time_label.config(text=f"Remaining: {int(mins)} min {int(secs)} sec")

        self.top.update_idletasks()


def colors_similar(c1, c2):
    """Проверяет, похожи ли цвета"""
    return all(abs(c1[i] - c2[i]) <= COLOR_SIMILARITY_THRESHOLD for i in range(3))


def select_color(R, G, B):
    global current_color
    if current_color and colors_similar(current_color, (R, G, B)):
        return

    def enter_value(pos, value):
        ahk.mouse_move(pos[0], pos[1], speed=MOVEMENT_SPEED)
        ahk.click()
        time.sleep(0.05)
        ahk.send_input('^a')
        time.sleep(0.05)
        ahk.send_input('{Backspace}')
        time.sleep(0.05)
        ahk.send_input(str(value))
        time.sleep(COLOR_CHANGE_DELAY / 3)

    enter_value(R_FIELD, R)
    enter_value(G_FIELD, G)
    enter_value(B_FIELD, B)

    current_color = (R, G, B)
    time.sleep(COLOR_CHANGE_DELAY)


def click_pixel(x, y):
    """Клик по пикселю с интерполяцией координат"""
    x_ratio, y_ratio = x / img.width, y / img.height
    screen_x = top_left[0] * (1 - x_ratio) * (1 - y_ratio) + top_right[0] * x_ratio * (1 - y_ratio) + \
               bottom_left[0] * (1 - x_ratio) * y_ratio + bottom_right[0] * x_ratio * y_ratio
    screen_y = top_left[1] * (1 - x_ratio) * (1 - y_ratio) + top_right[1] * x_ratio * (1 - y_ratio) + \
               bottom_left[1] * (1 - x_ratio) * y_ratio + bottom_right[1] * x_ratio * y_ratio

    ahk.mouse_move(screen_x, screen_y, speed=MOVEMENT_SPEED)
    ahk.click()
    time.sleep(CLICK_DELAY)


def process_line(start_x, end_x, y):
    """Обрабатывает строку с плавным движением мыши"""
    start_ratio, end_ratio = start_x / img.width, end_x / img.width
    y_ratio = y / img.height

    start_screen_x = top_left[0] * (1 - start_ratio) * (1 - y_ratio) + top_right[0] * start_ratio * (1 - y_ratio) + \
                     bottom_left[0] * (1 - start_ratio) * y_ratio + bottom_right[0] * start_ratio * y_ratio
    start_screen_y = top_left[1] * (1 - start_ratio) * (1 - y_ratio) + top_right[1] * start_ratio * (1 - y_ratio) + \
                     bottom_left[1] * (1 - start_ratio) * y_ratio + bottom_right[1] * start_ratio * y_ratio

    end_screen_x = top_left[0] * (1 - end_ratio) * (1 - y_ratio) + top_right[0] * end_ratio * (1 - y_ratio) + \
                   bottom_left[0] * (1 - end_ratio) * y_ratio + bottom_right[0] * end_ratio * y_ratio
    end_screen_y = top_left[1] * (1 - end_ratio) * (1 - y_ratio) + top_right[1] * end_ratio * (1 - y_ratio) + \
                   bottom_left[1] * (1 - end_ratio) * y_ratio + bottom_right[1] * end_ratio * y_ratio

    # Плавное движение (4 секунды)
    ahk.mouse_move(start_screen_x, start_screen_y, speed=MOVEMENT_SPEED)
    time.sleep(0.05)
    ahk.click(button="L", direction="D")
    time.sleep(0.05)

    duration = 4.0
    steps = 100
    delay = duration / steps

    for i in range(1, steps + 1):
        ratio = i / steps
        x = start_screen_x + (end_screen_x - start_screen_x) * ratio
        y = start_screen_y + (end_screen_y - start_screen_y) * ratio
        ahk.mouse_move(x, y, speed=0)
        time.sleep(delay)

    ahk.click(button="L", direction="U")
    time.sleep(CLICK_DELAY)


def save_coords_to_db():
    """Сохраняет текущие координаты в БД"""
    conn = sqlite3.connect('spray_paint_coords.db')
    c = conn.cursor()

    # Сохраняем координаты области рисования
    c.execute('''INSERT INTO drawing_area 
                 (top_left_x, top_left_y, top_right_x, top_right_y, 
                  bottom_left_x, bottom_left_y, bottom_right_x, bottom_right_y, timestamp)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
              (top_left[0], top_left[1], top_right[0], top_right[1],
               bottom_left[0], bottom_left[1], bottom_right[0], bottom_right[1], datetime.now()))

    # Сохраняем координаты RGB полей
    c.execute('''INSERT INTO rgb_fields 
                 (r_x, r_y, g_x, g_y, b_x, b_y, timestamp)
                 VALUES (?, ?, ?, ?, ?, ?, ?)''',
              (R_FIELD[0], R_FIELD[1], G_FIELD[0], G_FIELD[1],
               B_FIELD[0], B_FIELD[1], datetime.now()))

    conn.commit()
    conn.close()


def load_last_coords_from_db():
    """Загружает последние сохраненные координаты из БД"""
    conn = sqlite3.connect('spray_paint_coords.db')
    c = conn.cursor()

    # Загружаем последние координаты области рисования
    c.execute('''SELECT top_left_x, top_left_y, top_right_x, top_right_y, 
                        bottom_left_x, bottom_left_y, bottom_right_x, bottom_right_y 
                 FROM drawing_area 
                 ORDER BY timestamp DESC LIMIT 1''')
    drawing_coords = c.fetchone()

    if drawing_coords:
        global top_left, top_right, bottom_left, bottom_right
        top_left = [drawing_coords[0], drawing_coords[1]]
        top_right = [drawing_coords[2], drawing_coords[3]]
        bottom_left = [drawing_coords[4], drawing_coords[5]]
        bottom_right = [drawing_coords[6], drawing_coords[7]]

    # Загружаем последние координаты RGB полей
    c.execute('''SELECT r_x, r_y, g_x, g_y, b_x, b_y 
                 FROM rgb_fields 
                 ORDER BY timestamp DESC LIMIT 1''')
    rgb_coords = c.fetchone()

    if rgb_coords:
        global R_FIELD, G_FIELD, B_FIELD
        R_FIELD = [rgb_coords[0], rgb_coords[1]]
        G_FIELD = [rgb_coords[2], rgb_coords[3]]
        B_FIELD = [rgb_coords[4], rgb_coords[5]]

    conn.close()


class DrawingApp:
    def process_by_colors(self, progress_window=None):
        global processed_pixels, total_pixels, stop_flag, paused

        if not self.processed_data:
            return

        total_pixels = self.processed_data['total_pixels']
        color_groups = self.processed_data['color_groups']
        base_colors = self.processed_data['base_colors']
        is_png_with_alpha = self.processed_data.get('has_alpha', False)

        if is_png_with_alpha:
            print("PNG with transparency - skipping transparent pixels")
            if progress_window:
                progress_window.progress_label.config(text="Skipping transparent PNG pixels...")

        # Обработка всех цветов
        for color in base_colors:
            print(f"Processing color R={color[0]} G={color[1]} B={color[2]}...")
            if progress_window:
                progress_window.progress_label.config(
                    text=f"Processing color R={color[0]} G={color[1]} B={color[2]}...")

            select_color(*color)

            # Группируем пиксели по строкам
            rows = defaultdict(list)
            for x, y in color_groups[color]:
                rows[y].append(x)

            # Обрабатываем каждую строку
            for y in sorted(rows.keys()):
                x_coords = sorted(rows[y])
                if not x_coords:
                    continue

                # Находим непрерывные отрезки
                start_x = x_coords[0]
                prev_x = x_coords[0]

                for x in x_coords[1:]:
                    if x == prev_x + 1:
                        prev_x = x
                    else:
                        # Обрабатываем текущий отрезок
                        while paused:
                            if stop_flag: return
                            time.sleep(0.1)
                        if stop_flag: return

                        process_line(start_x, prev_x, y)
                        processed_pixels += (prev_x - start_x + 1)
                        if progress_window and processed_pixels % 100 == 0:
                            progress_window.update_progress(processed_pixels, total_pixels)

                        # Начинаем новый отрезок
                        start_x = x
                        prev_x = x

                # Обрабатываем последний отрезок
                while paused:
                    if stop_flag: return
                    time.sleep(0.1)
                if stop_flag: return

                process_line(start_x, prev_x, y)
                processed_pixels += (prev_x - start_x + 1)
                if progress_window and processed_pixels % 100 == 0:
                    progress_window.update_progress(processed_pixels, total_pixels)
    def __init__(self, root):
        self.root = root
        self.root.title("Spray Paint Drawing Tool")
        self.progress_window = None
        self.processed_data = None

        # Загружаем последние сохраненные координаты
        load_last_coords_from_db()

        self.setup_hotkeys()
        self.create_widgets()
        self.update_coordinates_display()
        self.update_rgb_fields_display()

    def setup_hotkeys(self):
        global hotkey_listener
        if hotkey_listener:
            keyboard.unhook(hotkey_listener)

        def on_key_event(e):
            if e.event_type == keyboard.KEY_DOWN:
                if e.name.lower() == 'm' and keyboard.is_pressed('shift'):
                    self.toggle_pause()
                elif e.name.lower() == 'n' and keyboard.is_pressed('shift'):
                    self.toggle_pause(resume=True)

        hotkey_listener = keyboard.hook(on_key_event)

    def create_widgets(self):
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(pady=10, padx=10, fill="both", expand=True)

        # Image Frame
        self.image_frame = ttk.LabelFrame(self.main_frame, text="Image")
        self.image_frame.pack(fill="x", pady=5)

        self.select_btn = ttk.Button(self.image_frame, text="Select Image", command=self.select_image)
        self.select_btn.pack(side="left", padx=5, pady=5)

        self.image_status = ttk.Label(self.image_frame, text="Not selected")
        self.image_status.pack(side="left", padx=5, pady=5, fill="x", expand=True)

        # Drawing Area Frame
        self.coord_frame = ttk.LabelFrame(self.main_frame, text="Drawing Area")
        self.coord_frame.pack(fill="x", pady=5)

        # Top Left
        ttk.Label(self.coord_frame, text="Top left:").grid(row=0, column=0, padx=5, pady=2, sticky="e")
        self.tl_x_entry = ttk.Entry(self.coord_frame, width=6)
        self.tl_x_entry.grid(row=0, column=1, padx=2, pady=2)
        self.tl_y_entry = ttk.Entry(self.coord_frame, width=6)
        self.tl_y_entry.grid(row=0, column=2, padx=2, pady=2)

        # Top Right
        ttk.Label(self.coord_frame, text="Top right:").grid(row=1, column=0, padx=5, pady=2, sticky="e")
        self.tr_x_entry = ttk.Entry(self.coord_frame, width=6)
        self.tr_x_entry.grid(row=1, column=1, padx=2, pady=2)
        self.tr_y_entry = ttk.Entry(self.coord_frame, width=6)
        self.tr_y_entry.grid(row=1, column=2, padx=2, pady=2)

        # Bottom Left
        ttk.Label(self.coord_frame, text="Bottom left:").grid(row=2, column=0, padx=5, pady=2, sticky="e")
        self.bl_x_entry = ttk.Entry(self.coord_frame, width=6)
        self.bl_x_entry.grid(row=2, column=1, padx=2, pady=2)
        self.bl_y_entry = ttk.Entry(self.coord_frame, width=6)
        self.bl_y_entry.grid(row=2, column=2, padx=2, pady=2)

        # Bottom Right
        ttk.Label(self.coord_frame, text="Bottom right:").grid(row=3, column=0, padx=5, pady=2, sticky="e")
        self.br_x_entry = ttk.Entry(self.coord_frame, width=6)
        self.br_x_entry.grid(row=3, column=1, padx=2, pady=2)
        self.br_y_entry = ttk.Entry(self.coord_frame, width=6)
        self.br_y_entry.grid(row=3, column=2, padx=2, pady=2)

        # Coordinate Buttons
        self.coord_btn_frame = ttk.Frame(self.coord_frame)
        self.coord_btn_frame.grid(row=4, column=0, columnspan=3, pady=5)

        self.set_bounds_btn = ttk.Button(self.coord_btn_frame,
                                         text="Capture Bounds (F+Alt+LMB)",
                                         command=self.set_drawing_bounds)
        self.set_bounds_btn.pack(side="left", padx=5)

        self.save_coords_btn = ttk.Button(self.coord_btn_frame,
                                          text="Save Coordinates",
                                          command=self.save_coordinates)
        self.save_coords_btn.pack(side="left", padx=5)

        # RGB Fields Frame
        self.rgb_frame = ttk.LabelFrame(self.main_frame, text="RGB Input Fields")
        self.rgb_frame.pack(fill="x", pady=5)

        # Red Field
        ttk.Label(self.rgb_frame, text="Red:").grid(row=0, column=0, padx=5, pady=2, sticky="e")
        self.r_x_entry = ttk.Entry(self.rgb_frame, width=6)
        self.r_x_entry.grid(row=0, column=1, padx=2, pady=2)
        self.r_y_entry = ttk.Entry(self.rgb_frame, width=6)
        self.r_y_entry.grid(row=0, column=2, padx=2, pady=2)

        # Green Field
        ttk.Label(self.rgb_frame, text="Green:").grid(row=1, column=0, padx=5, pady=2, sticky="e")
        self.g_x_entry = ttk.Entry(self.rgb_frame, width=6)
        self.g_x_entry.grid(row=1, column=1, padx=2, pady=2)
        self.g_y_entry = ttk.Entry(self.rgb_frame, width=6)
        self.g_y_entry.grid(row=1, column=2, padx=2, pady=2)

        # Blue Field
        ttk.Label(self.rgb_frame, text="Blue:").grid(row=2, column=0, padx=5, pady=2, sticky="e")
        self.b_x_entry = ttk.Entry(self.rgb_frame, width=6)
        self.b_x_entry.grid(row=2, column=1, padx=2, pady=2)
        self.b_y_entry = ttk.Entry(self.rgb_frame, width=6)
        self.b_y_entry.grid(row=2, column=2, padx=2, pady=2)

        # RGB Buttons
        self.rgb_btn_frame = ttk.Frame(self.rgb_frame)
        self.rgb_btn_frame.grid(row=3, column=0, columnspan=3, pady=5)

        self.rgb_capture_btn = ttk.Button(self.rgb_btn_frame,
                                          text="Capture RGB Fields (Alt+G+LMB)",
                                          command=self.capture_rgb_fields)
        self.rgb_capture_btn.pack(side="left", padx=5)

        self.save_rgb_btn = ttk.Button(self.rgb_btn_frame,
                                       text="Save RGB Fields",
                                       command=self.save_rgb_fields)
        self.save_rgb_btn.pack(side="left", padx=5)

        # Settings Frame
        self.settings_frame = ttk.LabelFrame(self.main_frame, text="Settings")
        self.settings_frame.pack(fill="x", pady=5)

        ttk.Label(self.settings_frame, text="Start delay (sec):").grid(row=0, column=0, padx=5, pady=2, sticky="e")
        self.countdown_entry = ttk.Entry(self.settings_frame, width=6)
        self.countdown_entry.insert(0, str(COUNTDOWN_SECONDS))
        self.countdown_entry.grid(row=0, column=1, padx=5, pady=2, sticky="w")

        # Control Frame
        self.control_frame = ttk.LabelFrame(self.main_frame, text="Control")
        self.control_frame.pack(fill="x", pady=5)

        # Top Buttons
        self.top_control_frame = ttk.Frame(self.control_frame)
        self.top_control_frame.pack(fill="x", pady=5)

        self.process_btn = ttk.Button(self.top_control_frame,
                                      text="Process Image",
                                      command=self.process_image,
                                      state="disabled")
        self.process_btn.pack(side="left", padx=5, expand=True, fill="x")

        self.progress_btn = ttk.Button(self.top_control_frame,
                                       text="Show Progress",
                                       command=self.show_progress,
                                       state="disabled")
        self.progress_btn.pack(side="left", padx=5, expand=True, fill="x")

        # Bottom Buttons
        self.bottom_control_frame = ttk.Frame(self.control_frame)
        self.bottom_control_frame.pack(fill="x", pady=(0, 5))

        self.start_btn = ttk.Button(self.bottom_control_frame,
                                    text="Start Drawing",
                                    command=self.start_drawing,
                                    state="disabled")
        self.start_btn.pack(side="left", padx=5, expand=True, fill="x")

        self.stop_btn = ttk.Button(self.bottom_control_frame,
                                   text="Stop",
                                   command=self.stop_drawing,
                                   state="disabled")
        self.stop_btn.pack(side="left", padx=5, expand=True, fill="x")

        # Status Bar
        self.status_frame = ttk.Frame(self.main_frame)
        self.status_frame.pack(fill="x", pady=5)

        self.hotkey_label = ttk.Label(self.status_frame,
                                      text="Pause: Shift+M | Resume: Shift+N")
        self.hotkey_label.pack(side="left", padx=5)

        self.status_label = ttk.Label(self.status_frame, text="Select an image to begin")
        self.status_label.pack(side="right", padx=5)

    def show_progress(self):
        if self.progress_window is None or not tk.Toplevel.winfo_exists(self.progress_window.top):
            self.progress_window = ProgressWindow(self.root)
        else:
            self.progress_window.top.lift()

    def update_coordinates_display(self):
        self.tl_x_entry.delete(0, tk.END)
        self.tl_x_entry.insert(0, str(top_left[0]))
        self.tl_y_entry.delete(0, tk.END)
        self.tl_y_entry.insert(0, str(top_left[1]))

        self.tr_x_entry.delete(0, tk.END)
        self.tr_x_entry.insert(0, str(top_right[0]))
        self.tr_y_entry.delete(0, tk.END)
        self.tr_y_entry.insert(0, str(top_right[1]))

        self.bl_x_entry.delete(0, tk.END)
        self.bl_x_entry.insert(0, str(bottom_left[0]))
        self.bl_y_entry.delete(0, tk.END)
        self.bl_y_entry.insert(0, str(bottom_left[1]))

        self.br_x_entry.delete(0, tk.END)
        self.br_x_entry.insert(0, str(bottom_right[0]))
        self.br_y_entry.delete(0, tk.END)
        self.br_y_entry.insert(0, str(bottom_right[1]))

    def update_rgb_fields_display(self):
        self.r_x_entry.delete(0, tk.END)
        self.r_x_entry.insert(0, str(R_FIELD[0]))
        self.r_y_entry.delete(0, tk.END)
        self.r_y_entry.insert(0, str(R_FIELD[1]))

        self.g_x_entry.delete(0, tk.END)
        self.g_x_entry.insert(0, str(G_FIELD[0]))
        self.g_y_entry.delete(0, tk.END)
        self.g_y_entry.insert(0, str(G_FIELD[1]))

        self.b_x_entry.delete(0, tk.END)
        self.b_x_entry.insert(0, str(B_FIELD[0]))
        self.b_y_entry.delete(0, tk.END)
        self.b_y_entry.insert(0, str(B_FIELD[1]))

    def save_coordinates(self):
        try:
            top_left[0] = int(self.tl_x_entry.get())
            top_left[1] = int(self.tl_y_entry.get())
            top_right[0] = int(self.tr_x_entry.get())
            top_right[1] = int(self.tr_y_entry.get())
            bottom_left[0] = int(self.bl_x_entry.get())
            bottom_left[1] = int(self.bl_y_entry.get())
            bottom_right[0] = int(self.br_x_entry.get())
            bottom_right[1] = int(self.br_y_entry.get())

            save_coords_to_db()  # Сохраняем в БД

            self.status_label.config(text="Coordinates saved successfully!")
        except ValueError:
            messagebox.showerror("Error", "Please enter valid numeric coordinates")

    def save_rgb_fields(self):
        try:
            R_FIELD[0] = int(self.r_x_entry.get())
            R_FIELD[1] = int(self.r_y_entry.get())
            G_FIELD[0] = int(self.g_x_entry.get())
            G_FIELD[1] = int(self.g_y_entry.get())
            B_FIELD[0] = int(self.b_x_entry.get())
            B_FIELD[1] = int(self.b_y_entry.get())

            save_coords_to_db()  # Сохраняем в БД

            self.status_label.config(text="RGB field coordinates saved!")
        except ValueError:
            messagebox.showerror("Error", "Please enter valid numeric coordinates")

    def capture_rgb_fields(self):
        global rgb_points
        rgb_points = []
        self.status_label.config(text="RGB field capture mode: Press Alt+G+LMB")
        self.root.iconify()

        def on_click(x, y, button, pressed):
            if pressed and button == mouse.Button.left and keyboard.is_pressed('g') and keyboard.is_pressed('alt'):
                rgb_points.append((x, y))
                print(f"Captured point {len(rgb_points)}: [{x},{y}]")

                if len(rgb_points) == 1:
                    print("Select Green field")
                elif len(rgb_points) == 2:
                    print("Select Blue field")
                elif len(rgb_points) == 3:
                    R_FIELD[0], R_FIELD[1] = rgb_points[0]
                    G_FIELD[0], G_FIELD[1] = rgb_points[1]
                    B_FIELD[0], B_FIELD[1] = rgb_points[2]

                    self.root.deiconify()
                    self.update_rgb_fields_display()
                    self.status_label.config(text="RGB field coordinates set!")
                    save_coords_to_db()  # Сохраняем в БД
                    return False

        print("\nPress Alt+G+LMB to capture RGB field coordinates.")
        listener = mouse.Listener(on_click=on_click)
        listener.start()

    def select_image(self):
        global img, img_path
        file_path = filedialog.askopenfilename(
            title="Select Image",
            filetypes=(("Image files", "*.jpg;*.jpeg;*.png"), ("All files", "*.*"))
        )

        if file_path:
            try:
                img = Image.open(file_path)
                if img.mode != 'RGBA' and file_path.lower().endswith('.png'):
                    img = img.convert('RGBA')
                elif img.mode != 'RGB':
                    img = img.convert('RGB')

                if img.width * img.height > 1000000:  # 1 megapixel
                    if not messagebox.askyesno("Warning", "Large image may cause performance issues. Continue?"):
                        return

                img_path = file_path
                self.image_status.config(text=os.path.basename(file_path))
                self.process_btn.config(state="normal")
                self.progress_btn.config(state="normal")
                self.start_btn.config(state="disabled")
                self.processed_data = None
                self.status_label.config(text="Image loaded. Process it before drawing")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load image: {e}")

    def process_image(self):
        if not img:
            messagebox.showerror("Error", "Please select an image first")
            return

        try:
            self.status_label.config(text="Processing image...")
            self.root.update()

            start_time = time.time()
            self.processed_data = self.analyze_image()
            processing_time = time.time() - start_time

            self.status_label.config(text=f"Image processed in {processing_time:.1f} sec!")
            self.start_btn.config(state="normal")
            messagebox.showinfo("Done",
                                f"Image processed in {processing_time:.1f} sec\n"
                                f"Colors found: {len(self.processed_data['base_colors'])}")

        except Exception as e:
            messagebox.showerror("Error", f"Error processing image: {e}")
            self.status_label.config(text="Processing error")

    def analyze_image(self):
        analysis = {
            'width': img.width,
            'height': img.height,
            'total_pixels': img.width * img.height,
            'color_groups': defaultdict(list),
            'base_colors': [],
            'has_alpha': img.mode == 'RGBA'
        }

        for y in range(img.height):
            for x in range(img.width):
                pixel = img.getpixel((x, y))

                if analysis['has_alpha'] and len(pixel) == 4 and pixel[3] == 0:
                    continue

                rgb = pixel[:3]
                matched = False

                for base in analysis['base_colors']:
                    if colors_similar(base, rgb):
                        analysis['color_groups'][base].append((x, y))
                        matched = True
                        break

                if not matched:
                    analysis['base_colors'].append(rgb)
                    analysis['color_groups'][rgb].append((x, y))

        return analysis

    def set_drawing_bounds(self):
        global points
        points = []
        self.status_label.config(text="Coordinate capture mode: Press F+Alt+LMB")
        self.root.iconify()

        def on_click(x, y, button, pressed):
            if pressed and button == mouse.Button.left and keyboard.is_pressed('f') and keyboard.is_pressed('alt'):
                points.append((x, y))
                print(f"Captured point {len(points)}: [{x},{y}]")

                if len(points) == 1:
                    print("Select top right point")
                elif len(points) == 2:
                    print("Select bottom left point")
                elif len(points) == 3:
                    print("Select bottom right point")
                elif len(points) == 4:
                    top_left[0], top_left[1] = points[0]
                    top_right[0], top_right[1] = points[1]
                    bottom_left[0], bottom_left[1] = points[2]
                    bottom_right[0], bottom_right[1] = points[3]

                    self.root.deiconify()
                    self.update_coordinates_display()
                    self.status_label.config(text="Drawing bounds set!")
                    save_coords_to_db()  # Сохраняем в БД
                    return False

        print("\nPress F+Alt+LMB to capture points.")
        listener = mouse.Listener(on_click=on_click)
        listener.start()

    def toggle_pause(self, resume=False):
        global paused
        if resume:
            paused = False
            self.status_label.config(text="Drawing resumed")
        else:
            paused = True
            self.status_label.config(text="Drawing paused")

    def start_drawing(self):
        if not self.processed_data:
            messagebox.showerror("Error", "Please process the image first")
            return

        try:
            COUNTDOWN_SECONDS = int(self.countdown_entry.get())
            if COUNTDOWN_SECONDS < 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid number of seconds")
            return

        global stop_flag, paused, processed_pixels
        stop_flag = False
        paused = False
        processed_pixels = 0

        self.disable_controls()
        self.status_label.config(text=f"Starting in {COUNTDOWN_SECONDS} sec...")

        self.show_progress()
        self.progress_window.progress_label.config(text="Preparing to draw...")
        self.progress_window.progress_bar["value"] = 0
        self.progress_window.percentage_label.config(text="0%")
        self.progress_window.time_label.config(text="Remaining: calculating...")
        self.progress_window.start_time = time.time()

        drawing_thread = threading.Thread(target=self.run_drawing, daemon=True)
        drawing_thread.start()

    def disable_controls(self):
        self.select_btn.config(state="disabled")
        self.set_bounds_btn.config(state="disabled")
        self.save_coords_btn.config(state="disabled")
        self.rgb_capture_btn.config(state="disabled")
        self.save_rgb_btn.config(state="disabled")
        self.start_btn.config(state="disabled")
        self.process_btn.config(state="disabled")
        self.stop_btn.config(state="normal")

    def enable_controls(self):
        self.select_btn.config(state="normal")
        self.set_bounds_btn.config(state="normal")
        self.save_coords_btn.config(state="normal")
        self.rgb_capture_btn.config(state="normal")
        self.save_rgb_btn.config(state="normal")
        self.start_btn.config(state="normal" if self.processed_data else "disabled")
        self.process_btn.config(state="normal")
        self.stop_btn.config(state="disabled")

    def run_drawing(self):
        for i in range(COUNTDOWN_SECONDS, 0, -1):
            if stop_flag:
                return
            self.status_label.config(text=f"Starting in {i} sec...")
            if self.progress_window:
                self.progress_window.progress_label.config(text=f"Starting in {i} sec...")
            time.sleep(1)

        if stop_flag:
            return

        self.status_label.config(text="Drawing started...")
        if self.progress_window:
            self.progress_window.progress_label.config(text="Drawing started...")

        # Используем self.process_by_colors вместо process_by_colors
        self.process_by_colors(self.progress_window)

        if not stop_flag:
            self.save_drawing()
            self.stop_drawing()
            print("Drawing completed!")
            if self.progress_window:
                self.progress_window.progress_label.config(text="Drawing completed!")
                self.progress_window.progress_bar["value"] = 100
                self.progress_window.percentage_label.config(text="100%")
                self.progress_window.time_label.config(text="Completed!")

    def stop_drawing(self):
        global stop_flag, paused
        stop_flag = True
        paused = False
        self.enable_controls()
        self.status_label.config(text="Drawing stopped")

    def save_drawing(self):
        if not img_path:
            return

        filename = os.path.splitext(os.path.basename(img_path))[0]

        ahk.mouse_move(SAVE_BUTTON_POS[0], SAVE_BUTTON_POS[1], speed=MOVEMENT_SPEED)
        ahk.click()
        time.sleep(0.5)

        ahk.mouse_move(FILENAME_INPUT_POS[0], FILENAME_INPUT_POS[1], speed=MOVEMENT_SPEED)
        ahk.click()
        time.sleep(0.2)

        ahk.mouse_move(FILENAME_INPUT_POS[0], FILENAME_INPUT_POS[1] + FILENAME_CLICK_OFFSET, speed=MOVEMENT_SPEED)
        ahk.click()
        time.sleep(0.2)

        ahk.send_input('^a')
        time.sleep(0.1)
        ahk.send_input('{Backspace}')
        time.sleep(0.1)
        ahk.send_input(filename)
        time.sleep(0.2)

        ahk.mouse_move(SAVE_CONFIRM_POS[0], SAVE_CONFIRM_POS[1], speed=MOVEMENT_SPEED)
        ahk.click()
        time.sleep(0.5)

        print(f"Drawing saved as '{filename}'")


if __name__ == "__main__":
    root = tk.Tk()
    style = ttk.Style()
    style.theme_use('clam')

    app = DrawingApp(root)
    root.mainloop()
